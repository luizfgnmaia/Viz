library(dplyr)
library(ggplot2)
library(tidytext)
library(rtweet)
library(circlize) # https://jokergoo.github.io/circlize_book/book/
library(ComplexHeatmap) # https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html
load("data/transcripts.RData")
load("data/ratings.RData")
tweets = parse_stream("CEAxFLU.json")
ts_plot(tweets, by = "mins") + # função do rtweet que utiliza o ggplot
theme_bw()
transcripts
ratings
transcripts$text[2]
intro = transcripts$text[1]
transcripts = transcripts %>%
filter(text != intro) %>% # tirando as introducoes
mutate(text = stringr::str_replace_all(text, '\\[(.*?)\\]', ''), # tirando o que ta entre colchetes
text = qdapRegex::rm_number(text))
transcripts$text[1] # índice 1 pois removi a introdução
sort(unique(stop_words$word))
ut = transcripts %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") # retirando stop words
ut
count_speaker = ut %>%
count(speaker) %>%
arrange(desc(n))
count_speaker
water = "#27A3EB"
fire = "#D7333C"
earth = "#6FCC36"
air = "gold1"
personagens = count_speaker$speaker[1:18]
origin = tibble(speaker = personagens, origin = c("water", "air", "water", "fire", "fire", "earth", "fire", "fire", "earth", "water", "air", "fire", "fire", "earth", "water", "earth", "earth", "fire"))
origin
count_speaker$Selecionado = "Não"
count_speaker$Selecionado[1:18] = "Sim"
n_outros = sum(count_speaker$n[which(count_speaker$Selecionado == "Não")])
count_speaker %>%
head(24) %>%
rbind(tibble(speaker = "Outros", n = n_outros, Selecionado = "Não")) %>%
mutate(speaker = factor(speaker, levels = speaker)) %>%
ggplot(aes(x = speaker, y = n, alpha = Selecionado, fill = speaker)) +
geom_bar(stat = "identity") +
xlab("Personagem") +
ylab("Quantidade de palavras") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3)) +
scale_alpha_discrete(range = c(0.3, 0.9)) +
ggtitle("Quantidade de palavras por personagens e personagens selecionados") +
guides(alpha = guide_legend(reverse = TRUE), fill = FALSE) +
scale_fill_manual(values = c(water, air, water, fire, fire, earth,
fire, fire, earth, water, air, fire,
fire, earth, water, earth, earth, fire,
earth, water, fire, fire, fire, water, "black"))
tfidf = ut %>%
filter(speaker %in% personagens) %>%
count(word, speaker) %>%
bind_tf_idf(word, speaker, n) %>%
arrange(desc(tf_idf))
tmp1 = tibble(speaker = count_speaker$speaker[1:18],
order_speaker = 1:18)
tmp2 = tfidf %>%
inner_join(tmp1, by = "speaker") %>%
mutate(speaker = reorder(speaker, order_speaker)) %>%
arrange(speaker, desc(n)) %>%
group_by(speaker) %>%
do(head(., 10)) %>%
ungroup() %>%
arrange(speaker, n) %>%
mutate(order_word = row_number())
tmp3 = tfidf %>%
inner_join(tmp1, by = "speaker") %>%
mutate(speaker = reorder(speaker, order_speaker)) %>%
arrange(speaker, desc(tf_idf)) %>%
group_by(speaker) %>%
do(head(., 10)) %>%
ungroup() %>%
arrange(speaker, tf_idf) %>%
mutate(order_word = row_number())
tmp2 %>%
ggplot(aes(x = order_word, y = n, fill = speaker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~ speaker, scales = "free", ncol = 6) +
theme_bw() +
scale_x_continuous(breaks = tmp2$order_word, labels = tmp2$word) +
scale_y_continuous(breaks = scales::pretty_breaks(2)) +
coord_flip() +
labs(title = "Palavras mais utilizadas por personagens",
x = NULL,
y = "n") +
scale_fill_manual(values = c(water, air, water, fire, fire, earth,
fire, fire, earth, water, air, fire,
fire, earth, water, earth, earth, fire))
tmp3 %>%
ggplot(aes(x = order_word, y = tf_idf, fill = speaker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~ speaker, scales = "free", ncol = 6) +
xlab("words") +
ylab("tf-idf") +
theme_bw() +
scale_x_continuous(breaks = tmp3$order_word, labels = tmp3$word) +
scale_y_continuous(breaks = scales::pretty_breaks(2)) +
coord_flip() +
labs(title = "Palavras com maiores tf-idf por personagem",
x = NULL,
y = "tf-idf") +
scale_fill_manual(values = c(water, air, water, fire, fire, earth,
fire, fire, earth, water, air, fire,
fire, earth, water, earth, earth, fire))
mat = reshape2::acast(tfidf, word ~ speaker, value.var = "tf", fill = 0)
rownames(mat) = rep("", nrow(mat))
heatmap(mat, main = "Matriz das frequências dos termos por personagem")
sokka = ut %>%
filter(speaker == "Sokka") %>%
count(word)
not_sokka = ut %>%
filter(speaker != "Sokka") %>%
select(word) %>%
distinct(.keep_all = TRUE)
sokka %>%
anti_join(not_sokka, by = "word") %>%
arrange(desc(n))
tmp = tibble(epi_num = unique(transcripts$epi_num), rating = ratings$rating)
words_epi = ut %>%
inner_join(tmp, by = "epi_num") %>%
filter(speaker %in% personagens) %>%
count(epi_num, rating, speaker)
words_epi
ratings$Temporada = as.factor(c(rep("1: Air", 20), rep("2: Earth", 20), rep("3: Fire", 21)))
ratings %>%
ggplot(aes(x = epi_num, y = rating, fill = Temporada)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c(water, earth, fire)) +
theme_bw() +
coord_cartesian(ylim = c(0, 10)) +
ggtitle("Nota do IMDB por episódio") +
xlab("Episódio") +
ylab("Nota") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
tmp4 = reshape2::acast(words_epi, epi_num ~ speaker, value.var = "n", fill = 0) %>%
reshape2::melt()
names(tmp4) = c("epi_num", "speaker", "n")
tmp4 = tmp4 %>%
inner_join(tmp1, by = "speaker") %>%
mutate(speaker = reorder(speaker, order_speaker))
tmp4 %>%
ggplot(aes(x = epi_num, y = n, fill = speaker)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~ speaker, scales = "free", ncol = 3) +
ylim(0, 300) +
theme_bw() +
scale_fill_manual(values = c(water, air, water, fire, fire, earth,
fire, fire, earth, water, air, fire,
fire, earth, water, earth, earth, fire)) +
ggtitle("Quantidade de palavras por episódio") +
xlab("Episódio") +
ylab("Quantidade de palavras") +
scale_x_continuous(expand = c(0, 0))
f <- function(personagem) {
out = NULL
for(i in 1:61) {
tmp = words_epi %>%
filter(speaker == personagem,
epi_num == i) %>%
.$n
out[i] = ifelse(length(tmp) == 0, 0, tmp)
}
out
}
mat2 = ratings$rating %>%
cbind(sapply(personagens, f))
colnames(mat2)[1] = "rating"
mat_rating = cor(mat2, method = "spearman")
cor_rating = mat_rating[-1, 1]
sort(cor_rating, decreasing = TRUE)
tibble(spearman = cor_rating, speaker = names(cor_rating)) %>%
inner_join(origin, by = "speaker") %>%
mutate(speaker = reorder(speaker, spearman)) %>%
ggplot(aes(speaker, spearman, fill = origin)) +
geom_bar(stat = "identity") +
xlab("Personagem") +
ylab("Correlação de Spearman") +
ggtitle("Correlações de Spearman entre a quantidade de palavras do personagem por episódio e notas do IMDB") +
theme_bw() +
scale_y_continuous(breaks = scales::pretty_breaks(3)) +
scale_fill_manual(values = c("water" = water, "fire" = fire, "air" = air, "earth" = earth)) +
guides(fill = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3))
Heatmap(mat_rating[-1,-1], name = "Correlação", column_title = "Matriz de correlação das quantidades de palavras por episódio")
mat_tfidf = reshape2::acast(tfidf, word ~ speaker, value.var = "tf_idf", fill = 0)
cos = lsa::cosine(mat)
Heatmap(cos, name = "Similaridade", column_title = "Matriz da similaridade do cosseno entre os vetores tf-idf",
col = colorRamp2(c(0, 1), c("white", "red")))
tmp6 = tfidf %>%
filter(word %in% stringr::str_to_lower(c(personagens, "feng"))) %>%
mutate(speaker = stringr::str_to_lower(speaker))
tmp6$speaker[which(tmp6$speaker == "long feng")] = "feng"
mat3 = reshape2::acast(tmp6, speaker ~ word, value.var = "n", fill = 0)
colnames(mat3) = c("Aang", "Azula", "Bumi", "Feng", "Hakoda", "Hama", "Iroh",
"Jet", "Katara", "Mai", "Ozai", "Pathik", "Roku", "Sokka",
"Suki", "Toph", "Zhao", "Zuko")
rownames(mat3) = colnames(mat3)
grid.col = c(Aang = air, Azula = fire, Bumi = earth, Feng = earth, Hakoda = water,
Hama = water, Iroh = fire, Jet = earth, Katara = water, Mai = fire,
Ozai = fire, Pathik = air, Roku = fire, Sokka = water, Suki = earth,
Toph = earth, Zhao = fire, Zuko = fire)
circos.clear()
circos.par(start.degree = 90, clock.wise = TRUE)
chordDiagram(mat3, grid.col = grid.col, annotationTrack = c("name", "grid"), directional = 1, diffHeight = uh(7), order = c("Pathik", "Aang", "Katara", "Sokka", "Hakoda", "Hama", "Toph", "Bumi", "Feng", "Jet", "Suki", "Zuko", "Roku", "Ozai", "Iroh", "Azula", "Mai", "Zhao"))
title("Menções dos nomes de personagens por outros personagens")
